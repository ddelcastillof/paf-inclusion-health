---
title: "PAFs for inclusion health"
format: pdf
author: Rob Aldridge & Darwin Del Castillo
---

```{r}
#| name: setup
#| include: FALSE

knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE, 
                      include =  FALSE, 
                      warning = FALSE)
```

```{r}
#| name: packages
pacman::p_load(googlesheets4, 
               metafor, 
               tidyverse, 
               skimr, 
               mc2d, 
               patchwork, 
               rjags, 
               coda)
```

```{r}
#| name: importing datasets
googlesheets4::gs4_deauth()

input_smr_all <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=570599438", sheet = "input_mortality", col_types = "ccccccccdcddccdcdccccdddccccc??????")
input_country_region_codes <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_country_and_region_codes")
input_mortality_numbers <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_IHME-GBD_2019_DATA")
input_population_numbers <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_world_bank_population_totals")
input_country_name_clean <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_country_name_clean")
input_homeless_pop <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_homeless")
input_prison_pop <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_prison")
input_sud_pop <- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_sud")
input_hic_country_list<- read_sheet("https://docs.google.com/spreadsheets/d/1onGl6q4gkPI4a2dtUvEeqgQEee0NYceAHBBpyOOXs88/edit#gid=1722368264", sheet = "input_hic")

glimpse(input_country_region_codes)
```

```{r}
#| name: additional settings
## setting the number of iterations
sim_run <- 1000
## disable scientific notation
options(scipen = 999999)
```

# Cleaning the SMR data

```{r}
#| name: basic cleaning

# filter the data to only include non-excluded or duplicate SMR data
smr_filter_all_cause <- input_smr_all %>%
  filter(Outcome_measure=="SMR", ICD10_chapter_number==0, is.na(Duplicate), is.na(Exclude), !is.na(lci), !is.na(uci)) %>%
  select (lci, uci, Outcome, Population, Country, First_author, Year_of_publication, Female) %>%
  as.data.frame() %>%
  rename (sex = Female)

# create standard error estimates from confidence intervals from study
smr_filter_all_cause$sei <- (log(smr_filter_all_cause$uci/smr_filter_all_cause$lci))/3.92

```

```{r}
#| name: advanced cleaning and monte carlo

# clean the total mortality data
glimpse(input_mortality_numbers)

high_income_countries_paf <- input_mortality_numbers %>%
  group_by(country_name, sex_id) %>%
  summarise(
    deaths = sum(val, na.rm = T),
    deaths_lci = sum(lower, na.rm = T),
    deaths_uci = sum(upper, na.rm = T),
    sim_run = sim_run
  )%>%
  filter (deaths >50000)%>%
  left_join(input_country_name_clean, by = "country_name")%>%
  filter (!is.na(alpha_3_country)) %>%
  ungroup() %>%
  mutate(
    sex = as.character (
      case_when ( sex_id == 1 ~ "Male",
                  sex_id == 2 ~ "Female",
                  sex_id == 3 ~ "Both"))
  ) %>%
  uncount(sim_run) %>%
  group_by(alpha_3_country, sex) %>%
  mutate(
    row_id = as.character(row_number()),
    id = str_c(alpha_3_country, row_id, sep = "-"),
    idsex = str_c(alpha_3_country, sex, row_id, sep = "-")
  ) %>%
  ungroup() %>%
  select (id, deaths, sex, idsex) 

# clean the homeless population data
glimpse(input_homeless_pop)

input_homeless_pop <- input_homeless_pop %>%
  select(alpha_3_country, homeless_pop, homeless_pop_lower, homeless_pop_upper) %>%
  mutate(sim_run = sim_run) %>%
  uncount(sim_run)  %>%
  rowwise() %>%
  mutate(
    homeless_mc_se = (homeless_pop_upper - homeless_pop_lower)/(2*1.96),
    homeless_lambda = rnorm(1, mean = homeless_pop, sd = homeless_mc_se),
    homeless_lambda = ifelse(homeless_lambda < 0, 0, homeless_lambda),
    homeless_mc_poisson = rpois(1, lambda = homeless_lambda)) %>%
  group_by(alpha_3_country) %>%
  mutate(
    row_id = as.character(row_number()),
    id = str_c(alpha_3_country, row_id, sep = "-")
  ) %>%
  ungroup() %>%
  select (id, homeless_mc_poisson) 

# clean the prison population data
glimpse(input_prison_pop)

input_prison_pop <- input_prison_pop  %>%
  left_join(input_country_name_clean, by = "country_name")  %>%
  right_join(input_hic_country_list, by = "alpha_3_country")   %>%
  filter (hic == 1) %>%
  select(alpha_3_country, prison_pop, prison_pop_lower, prison_pop_upper) %>% 
  mutate(sim_run = sim_run) %>%
  uncount(sim_run) %>%
  rowwise() %>%
  mutate(
    prison_mc_se = (prison_pop_upper - prison_pop_lower)/(2*1.96),
    prison_lambda = rnorm(1, mean = prison_pop, sd = prison_mc_se),
    prison_lambda = ifelse(prison_lambda < 0, 0, prison_lambda),
    prison_mc_poisson = rpois(1, lambda = prison_lambda)) %>%
  group_by(alpha_3_country) %>%
  mutate(
    row_id = as.character(row_number()),
    id = str_c(alpha_3_country, row_id, sep = "-")
  ) %>%
  ungroup() %>%
  select (id, prison_mc_poisson)

# clean the sud population data
glimpse(input_sud_pop)

input_sud_pop <- input_sud_pop %>%
  group_by(country_name) %>%
  summarise(
    sud_pop = sum(val, na.rm = T),
    sud_pop_lower = sum(lower, na.rm = T),
    sud_pop_upper = sum(upper, na.rm = T),
  )%>%
  left_join(input_country_name_clean, by = "country_name")%>%
  filter (!is.na(alpha_3_country)) %>%
  left_join(input_hic_country_list, by = "alpha_3_country")   %>%
  filter (hic == 1) %>%
  select(alpha_3_country, sud_pop, sud_pop_lower, sud_pop_upper) %>% 
  mutate(sim_run = sim_run) %>%
  uncount(sim_run) %>%
  rowwise() %>%
  mutate(
    sud_mc_se = (sud_pop_upper - sud_pop_lower)/(2*1.96),
    sud_lambda = rnorm(1, mean = sud_pop, sd = sud_mc_se),
    sud_lambda = ifelse(sud_lambda < 0, 0, sud_lambda),
    sud_mc_poisson = rpois(1, lambda = sud_lambda)
  ) %>%
  group_by(alpha_3_country) %>%
  mutate(
    row_id = as.character(row_number()),
    id = str_c(alpha_3_country, row_id, sep = "-")
  ) %>%
  ungroup() %>%
  select (id, sud_mc_poisson) 

# clean the total population data
glimpse(input_population_numbers)

population_numbers <-  input_population_numbers %>% 
  pivot_longer(
    cols = `1960`:`2021`
  )%>% 
  rename(
    year = name,
    gen_pop_tot = value
  ) %>%
  filter(year == 2019)%>%
  mutate(sim_run = sim_run) %>%
  uncount(sim_run)%>%
  group_by(alpha_3_country) %>%
  mutate(
    row_id = as.character(row_number()),
    id = str_c(alpha_3_country, row_id, sep = "-")
  ) %>%
  ungroup() %>%
  select (id, gen_pop_tot) 

```
# Estimate total inclusion health for each country and calculate p
## Setting a Bayesian network
Assumptions \
Overlap Probabilities: \
Assume certain probabilities for the overlaps based on prior knowledge or literature. \
- 0.2 overlap between homelessness and substance drug abusers \
- 0.4 overlap between substance drug abuse and incarceration \
- 0.2 overlap between incarceration and homelessness \
- 0.05 overlap between the three conditions \
(Reference: \href{https://pubmed.ncbi.nlm.nih.gov/36660275/}) [Only for H and SUD] \
Independence/Dependence: Let's assume independence between populations \

```{r}
#| name: gibbs sampling
# Joint to the dataset
inclusion_health_pop_est <- reduce(list(input_homeless_pop, 
                                        input_prison_pop, 
                                        input_sud_pop, 
                                        population_numbers), 
                                   left_join, by = "id") %>% rowwise()

# Creating identifier for strata
inclusion_health_pop_est$country <- substr(inclusion_health_pop_est$id, 1, 3)

# List of countries
countries <- unique(inclusion_health_pop_est$country)

# Define alpha outside the loop
alpha <- c(6, 4, 4, 4, 21, 9, 9, 3)  # Hyperparameters for Dirichlet prior

# Initialize lists to store data per country
data_jags_list <- list()

for (i in countries) {
  country_data <- subset(inclusion_health_pop_est, country == i)
  n <- nrow(country_data)
  
  data_jags <- list(
    N_homeless = country_data$homeless_mc_poisson,
    N_prison = country_data$prison_mc_poisson,
    N_sud = country_data$sud_mc_poisson,
    N_total = country_data$gen_pop_tot,
    n = n,
    alpha = alpha
  )
  
  data_jags_list[[i]] <- data_jags
}

# Defining JAGS model string
model_string <- "
model {
  for (i in 1:n) {
    # The observed counts are sums over the relevant subsets
    N_sud[i] ~ dpois(mu_sud[i])
    N_prison[i] ~ dpois(mu_prison[i])
    N_homeless[i] ~ dpois(mu_homeless[i])
    
    # Expected counts from overlaps
    mu_sud[i] <- N_total[i] * (p[2] + p[5] + p[6] + p[8])
    mu_prison[i] <- N_total[i] * (p[3] + p[5] + p[7] + p[8])
    mu_homeless[i] <- N_total[i] * (p[4] + p[6] + p[7] + p[8])
  }
  
  # Priors for the probabilities (sum to 1)
  p[1:8] ~ ddirich(alpha[])  # Dirichlet prior with alpha reflecting prior information
  
  # Assign probabilities to meaningful names (renamed)
  p_none <- p[1]             # None of the categories
  p_sud_only <- p[2]         # Only substance drug abusers
  p_prison_only <- p[3]      # Only prisoners
  p_homeless_only <- p[4]    # Only homeless
  p_sud_prison <- p[5]       # Substance drug abusers and prisoners
  p_sud_homeless <- p[6]     # Substance drug abusers and homeless
  p_prison_homeless <- p[7]  # Prisoners and homeless
  p_all_three <- p[8]        # All three categories
}
"

# Parameters to monitor
parameters <- c("p[1]", "p[2]", "p[3]", "p[4]", "p[5]", "p[6]", "p[7]", "p[8]")

# Initialize list to store results
results_list <- list()

# Run the model for each country
for (c in countries) {
  data_jags <- data_jags_list[[c]]
  
  # Initial values
  inits <- function() {
    p_init <- as.vector(rdirichlet(1, alpha))
    init_list <- list()
    for (k in 1:8) {
      init_list[[paste0("p[", k, "]")]] <- p_init[k]
    }
    return(init_list)
  }
  
  # Create JAGS model
  model <- jags.model(textConnection(model_string), data = data_jags, inits = inits,
                      n.chains = 3, n.adapt = 1000)
  
  # Burn-in
  update(model, 1000)
  
  # Sample from the posterior
  samples <- coda.samples(model, variable.names = parameters, n.iter = 5000)
  
  # Store results
  results_list[[c]] <- samples
}

country_results <- results_list[["USA"]]
summary(country_results)
plot(country_results)

# Combine chains if necessary
combined_samples <- do.call(mcmc.list, lapply(country_results, as.mcmc))

# Summarize
summary_results <- summary(combined_samples)
print(summary_results)

# Extract posterior means
posterior_means <- summary_results$statistics[, "Mean"]
names(posterior_means) <- c("p_none", "p_sud_only", "p_prison_only", "p_homeless_only",
                            "p_sud_prison", "p_sud_homeless", "p_prison_homeless", "p_all_three")
print(posterior_means)

```

